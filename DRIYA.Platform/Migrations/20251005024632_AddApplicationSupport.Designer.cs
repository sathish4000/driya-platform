// <auto-generated />
using System;
using DRIYA.Platform.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DRIYA.Platform.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251005024632_AddApplicationSupport")]
    partial class AddApplicationSupport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DRIYA.Platform.Models.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("KeyHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastUsageReset")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MonthlyUsage")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Permissions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalUsage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("KeyHash")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.ApiKeyUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApiKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ResponseCode")
                        .HasColumnType("int");

                    b.Property<int>("ResponseTimeMs")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ApiKeyId");

                    b.HasIndex("Timestamp");

                    b.ToTable("ApiKeyUsage");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Domain")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryColor")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Subdomain")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppKey")
                        .IsUnique();

                    b.HasIndex("Subdomain")
                        .IsUnique()
                        .HasFilter("[Subdomain] IS NOT NULL");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dbcc3473-bbdc-4263-a253-23cb50acbee6"),
                            AppKey = "platform",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 193, DateTimeKind.Utc).AddTicks(5654),
                            Description = "Default platform application",
                            Icon = "pi pi-cog",
                            IsActive = true,
                            Name = "DRIYA Platform",
                            PrimaryColor = "#3b82f6",
                            Status = "Active",
                            Subdomain = "app",
                            UpdatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 193, DateTimeKind.Utc).AddTicks(5763)
                        });
                });

            modelBuilder.Entity("DRIYA.Platform.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DRIYA.Platform.Models.ApplicationUserAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserAccess");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FeatureKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FeatureType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemFeature")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("FeatureKey")
                        .IsUnique();

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a600ee3b-29db-4084-9575-2a7acb661c8e"),
                            ApplicationId = new Guid("dbcc3473-bbdc-4263-a253-23cb50acbee6"),
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(4654),
                            DefaultValue = "true",
                            FeatureKey = "basic_analytics",
                            FeatureType = "Boolean",
                            IsActive = true,
                            IsSystemFeature = true,
                            Name = "Basic Analytics"
                        },
                        new
                        {
                            Id = new Guid("15818f30-16e9-4212-8a12-ba924fe5c201"),
                            ApplicationId = new Guid("dbcc3473-bbdc-4263-a253-23cb50acbee6"),
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(5688),
                            DefaultValue = "false",
                            FeatureKey = "advanced_analytics",
                            FeatureType = "Boolean",
                            IsActive = true,
                            IsSystemFeature = true,
                            Name = "Advanced Analytics"
                        },
                        new
                        {
                            Id = new Guid("232289cd-f56a-4fd4-b6f2-9f3af50414ee"),
                            ApplicationId = new Guid("dbcc3473-bbdc-4263-a253-23cb50acbee6"),
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(5692),
                            DefaultValue = "false",
                            FeatureKey = "custom_branding",
                            FeatureType = "Boolean",
                            IsActive = true,
                            IsSystemFeature = true,
                            Name = "Custom Branding"
                        },
                        new
                        {
                            Id = new Guid("32b5eaeb-efa3-45ed-83dc-eaeb6655845b"),
                            ApplicationId = new Guid("dbcc3473-bbdc-4263-a253-23cb50acbee6"),
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(5698),
                            DefaultValue = "true",
                            FeatureKey = "api_access",
                            FeatureType = "Boolean",
                            IsActive = true,
                            IsSystemFeature = true,
                            Name = "API Access"
                        },
                        new
                        {
                            Id = new Guid("55d7d3bf-d8af-487f-a48b-52eac9fa6f69"),
                            ApplicationId = new Guid("dbcc3473-bbdc-4263-a253-23cb50acbee6"),
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(5701),
                            DefaultValue = "false",
                            FeatureKey = "white_label",
                            FeatureType = "Boolean",
                            IsActive = true,
                            IsSystemFeature = true,
                            Name = "White Label"
                        },
                        new
                        {
                            Id = new Guid("4fc5ba51-0fb0-4387-9d41-6d3f69465859"),
                            ApplicationId = new Guid("dbcc3473-bbdc-4263-a253-23cb50acbee6"),
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(5705),
                            DefaultValue = "false",
                            FeatureKey = "priority_support",
                            FeatureType = "Boolean",
                            IsActive = true,
                            IsSystemFeature = true,
                            Name = "Priority Support"
                        },
                        new
                        {
                            Id = new Guid("8e034cca-d596-4eaa-9cd2-dc169bf73b44"),
                            ApplicationId = new Guid("dbcc3473-bbdc-4263-a253-23cb50acbee6"),
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(5708),
                            DefaultValue = "false",
                            FeatureKey = "sso_integration",
                            FeatureType = "Boolean",
                            IsActive = true,
                            IsSystemFeature = true,
                            Name = "SSO Integration"
                        },
                        new
                        {
                            Id = new Guid("31b80617-7e21-4fdd-9164-87e115edb775"),
                            ApplicationId = new Guid("dbcc3473-bbdc-4263-a253-23cb50acbee6"),
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(5711),
                            DefaultValue = "false",
                            FeatureKey = "advanced_security",
                            FeatureType = "Boolean",
                            IsActive = true,
                            IsSystemFeature = true,
                            Name = "Advanced Security"
                        });
                });

            modelBuilder.Entity("DRIYA.Platform.Models.FeatureFlag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOverride")
                        .HasColumnType("bit");

                    b.Property<string>("OverrideBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverrideReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex("FeatureId", "TenantId", "UserId")
                        .IsUnique()
                        .HasFilter("[TenantId] IS NOT NULL AND [UserId] IS NOT NULL");

                    b.ToTable("FeatureFlags");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BillingPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BillingPeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StripeInvoiceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StripePaymentIntentId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.HasIndex("PlanId");

                    b.HasIndex("TenantId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ItemType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.LicensePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowTrial")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemPlan")
                        .HasColumnType("bit");

                    b.Property<int>("MaxApiCalls")
                        .HasColumnType("int");

                    b.Property<int>("MaxStorageGB")
                        .HasColumnType("int");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("int");

                    b.Property<decimal>("MonthlyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PlanCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TrialDays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("YearlyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("LicensePlans");

                    b.HasData(
                        new
                        {
                            Id = new Guid("14af69ad-8b1a-40d2-b715-ea2b052e48b4"),
                            AllowTrial = true,
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(3820),
                            Currency = "USD",
                            Description = "Basic plan for small teams",
                            IsActive = true,
                            IsSystemPlan = true,
                            MaxApiCalls = 1000,
                            MaxStorageGB = 10,
                            MaxUsers = 5,
                            MonthlyPrice = 29.99m,
                            Name = "Basic",
                            PlanCode = "basic",
                            TrialDays = 14,
                            YearlyPrice = 299.99m
                        },
                        new
                        {
                            Id = new Guid("12308453-f1b0-4fbc-975f-1b64369ed0b3"),
                            AllowTrial = true,
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(3929),
                            Currency = "USD",
                            Description = "Professional plan for growing businesses",
                            IsActive = true,
                            IsSystemPlan = true,
                            MaxApiCalls = 10000,
                            MaxStorageGB = 100,
                            MaxUsers = 25,
                            MonthlyPrice = 99.99m,
                            Name = "Professional",
                            PlanCode = "pro",
                            TrialDays = 14,
                            YearlyPrice = 999.99m
                        },
                        new
                        {
                            Id = new Guid("87c677a0-6327-4e8f-8437-21bdad33eb9b"),
                            AllowTrial = true,
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(3932),
                            Currency = "USD",
                            Description = "Premium plan for enterprise customers",
                            IsActive = true,
                            IsSystemPlan = true,
                            MaxApiCalls = 100000,
                            MaxStorageGB = 1000,
                            MaxUsers = 100,
                            MonthlyPrice = 299.99m,
                            Name = "Premium",
                            PlanCode = "premium",
                            TrialDays = 14,
                            YearlyPrice = 2999.99m
                        });
                });

            modelBuilder.Entity("DRIYA.Platform.Models.LoginHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.ToTable("LoginHistory");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.PaymentGateway", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("GatewayType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTestMode")
                        .HasColumnType("bit");

                    b.Property<string>("MerchantId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PublicKey")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SecretKey")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SupportedCurrencies")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("SupportsBankTransfers")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportsCreditCards")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportsDigitalWallets")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportsRecurringPayments")
                        .HasColumnType("bit");

                    b.Property<decimal>("TransactionFeeFixed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransactionFeePercentage")
                        .HasColumnType("decimal(5,4)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebhookSecret")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("PaymentGateways");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.PaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("FailedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GatewayFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("GatewayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GatewayTransactionId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Metadata")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("PaymentIntentId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PlatformFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GatewayId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("TenantId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemPermission")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e838282c-4e40-4266-8d45-7f40db206c24"),
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(192),
                            IsActive = true,
                            IsSystemPermission = true,
                            Name = "User Management",
                            Resource = "User"
                        },
                        new
                        {
                            Id = new Guid("03e9e0f5-3c04-4825-94c1-8549d29071ab"),
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(864),
                            IsActive = true,
                            IsSystemPermission = true,
                            Name = "User Management",
                            Resource = "User"
                        },
                        new
                        {
                            Id = new Guid("c14a3f38-8e22-41ad-823e-18526f1d7fb1"),
                            Action = "Update",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(868),
                            IsActive = true,
                            IsSystemPermission = true,
                            Name = "User Management",
                            Resource = "User"
                        },
                        new
                        {
                            Id = new Guid("9c925429-05f7-4513-9686-c670c09249f6"),
                            Action = "Delete",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(870),
                            IsActive = true,
                            IsSystemPermission = true,
                            Name = "User Management",
                            Resource = "User"
                        },
                        new
                        {
                            Id = new Guid("341caa3e-1b4d-43d0-b206-8bf5d8373136"),
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(897),
                            IsActive = true,
                            IsSystemPermission = true,
                            Name = "Tenant Management",
                            Resource = "Tenant"
                        },
                        new
                        {
                            Id = new Guid("dc60d594-c5c3-452f-9567-f0c47f9e0c2e"),
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(905),
                            IsActive = true,
                            IsSystemPermission = true,
                            Name = "Tenant Management",
                            Resource = "Tenant"
                        },
                        new
                        {
                            Id = new Guid("18b60084-cc6f-4eb7-ace7-320465b56184"),
                            Action = "Update",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(906),
                            IsActive = true,
                            IsSystemPermission = true,
                            Name = "Tenant Management",
                            Resource = "Tenant"
                        },
                        new
                        {
                            Id = new Guid("dd606174-b82a-4926-b4de-47a6a2cb37e9"),
                            Action = "Delete",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(908),
                            IsActive = true,
                            IsSystemPermission = true,
                            Name = "Tenant Management",
                            Resource = "Tenant"
                        },
                        new
                        {
                            Id = new Guid("788f932d-471d-47a3-9a33-af4ab9754cd2"),
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(912),
                            IsActive = true,
                            IsSystemPermission = true,
                            Name = "Billing Management",
                            Resource = "Billing"
                        },
                        new
                        {
                            Id = new Guid("3ae1cadd-a463-4aa5-ac25-dc0c63c2eaab"),
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(916),
                            IsActive = true,
                            IsSystemPermission = true,
                            Name = "Billing Management",
                            Resource = "Billing"
                        },
                        new
                        {
                            Id = new Guid("b6419610-1c84-4926-b3ad-1aa7e116e7a0"),
                            Action = "Update",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(918),
                            IsActive = true,
                            IsSystemPermission = true,
                            Name = "Billing Management",
                            Resource = "Billing"
                        },
                        new
                        {
                            Id = new Guid("08c457e0-19da-4ca2-9444-3afd54938fb6"),
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(920),
                            IsActive = true,
                            IsSystemPermission = true,
                            Name = "Feature Management",
                            Resource = "Feature"
                        },
                        new
                        {
                            Id = new Guid("b43a18ef-911c-4080-9791-46f07c6a4594"),
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(923),
                            IsActive = true,
                            IsSystemPermission = true,
                            Name = "Feature Management",
                            Resource = "Feature"
                        },
                        new
                        {
                            Id = new Guid("77b5ee9e-75ce-4161-a11f-889da0c4a2f5"),
                            Action = "Update",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(924),
                            IsActive = true,
                            IsSystemPermission = true,
                            Name = "Feature Management",
                            Resource = "Feature"
                        },
                        new
                        {
                            Id = new Guid("58058f70-b94c-4a44-b3da-a62359be8a49"),
                            Action = "Create",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(926),
                            IsActive = true,
                            IsSystemPermission = true,
                            Name = "API Key Management",
                            Resource = "ApiKey"
                        },
                        new
                        {
                            Id = new Guid("0635071b-8c81-4932-b235-ab197076a358"),
                            Action = "Read",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(928),
                            IsActive = true,
                            IsSystemPermission = true,
                            Name = "API Key Management",
                            Resource = "ApiKey"
                        },
                        new
                        {
                            Id = new Guid("ad370943-978a-4099-b284-116cde102f0e"),
                            Action = "Update",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(931),
                            IsActive = true,
                            IsSystemPermission = true,
                            Name = "API Key Management",
                            Resource = "ApiKey"
                        },
                        new
                        {
                            Id = new Guid("7a554084-1897-4903-a441-5e680f32aff0"),
                            Action = "Delete",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 195, DateTimeKind.Utc).AddTicks(933),
                            IsActive = true,
                            IsSystemPermission = true,
                            Name = "API Key Management",
                            Resource = "ApiKey"
                        });
                });

            modelBuilder.Entity("DRIYA.Platform.Models.PlanFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("Limit")
                        .HasColumnType("int");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanFeatures");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("HierarchyLevel")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ParentRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("ParentRoleId");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 194, DateTimeKind.Utc).AddTicks(8714),
                            Description = "Global system administrator with full access",
                            HierarchyLevel = 0,
                            IsActive = true,
                            IsSystemRole = true,
                            Name = "GlobalAdmin",
                            NormalizedName = "GLOBALADMIN"
                        },
                        new
                        {
                            Id = "2",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 194, DateTimeKind.Utc).AddTicks(8932),
                            Description = "Tenant administrator with full tenant access",
                            HierarchyLevel = 1,
                            IsActive = true,
                            IsSystemRole = true,
                            Name = "TenantAdmin",
                            NormalizedName = "TENANTADMIN"
                        },
                        new
                        {
                            Id = "3",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 194, DateTimeKind.Utc).AddTicks(8937),
                            Description = "Manager with limited administrative access",
                            HierarchyLevel = 2,
                            IsActive = true,
                            IsSystemRole = true,
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "4",
                            CreatedAt = new DateTime(2025, 10, 5, 2, 46, 32, 194, DateTimeKind.Utc).AddTicks(8951),
                            Description = "Standard user with basic access",
                            HierarchyLevel = 3,
                            IsActive = true,
                            IsSystemRole = true,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("DRIYA.Platform.Models.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrentPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomDomain")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrialActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryColor")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("SecondaryColor")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("StripeCustomerId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StripeSubscriptionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("SubscriptionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SubscriptionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TrialEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ContactEmail");

                    b.HasIndex("CurrentPlanId");

                    b.HasIndex("TenantId")
                        .IsUnique();

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.TenantDatabase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ConnectionTimeout")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DatabaseType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<int>("MaxConnections")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Port")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseSSL")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantDatabases");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.UserPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DRIYA.Platform.Models.ApiKey", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.Tenant", "Tenant")
                        .WithMany("ApiKeys")
                        .HasForeignKey("TenantId");

                    b.HasOne("DRIYA.Platform.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.ApiKeyUsage", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.ApiKey", "ApiKey")
                        .WithMany("UsageHistory")
                        .HasForeignKey("ApiKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiKey");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.ApplicationUser", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.ApplicationUserAccess", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.Application", "Application")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DRIYA.Platform.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.Feature", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.Application", "Application")
                        .WithMany("Features")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.FeatureFlag", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.Feature", "Feature")
                        .WithMany("FeatureFlags")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DRIYA.Platform.Models.Tenant", "Tenant")
                        .WithMany("FeatureFlags")
                        .HasForeignKey("TenantId");

                    b.HasOne("DRIYA.Platform.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Feature");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.Invoice", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.LicensePlan", "Plan")
                        .WithMany("Invoices")
                        .HasForeignKey("PlanId");

                    b.HasOne("DRIYA.Platform.Models.Tenant", "Tenant")
                        .WithMany("Invoices")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.InvoiceItem", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.LoginHistory", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.ApplicationUser", "User")
                        .WithMany("LoginHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.PaymentTransaction", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.PaymentGateway", "Gateway")
                        .WithMany("Transactions")
                        .HasForeignKey("GatewayId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DRIYA.Platform.Models.Invoice", "Invoice")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DRIYA.Platform.Models.Tenant", "Tenant")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Gateway");

                    b.Navigation("Invoice");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.PlanFeature", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.Feature", "Feature")
                        .WithMany("PlanFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DRIYA.Platform.Models.LicensePlan", "Plan")
                        .WithMany("PlanFeatures")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.Role", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.Role", "ParentRole")
                        .WithMany("ChildRoles")
                        .HasForeignKey("ParentRoleId");

                    b.Navigation("ParentRole");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.RolePermission", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DRIYA.Platform.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.Tenant", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.Application", "Application")
                        .WithMany("Tenants")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DRIYA.Platform.Models.LicensePlan", "CurrentPlan")
                        .WithMany("Tenants")
                        .HasForeignKey("CurrentPlanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Application");

                    b.Navigation("CurrentPlan");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.TenantDatabase", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.Tenant", "Tenant")
                        .WithMany("TenantDatabases")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.UserPermission", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DRIYA.Platform.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("DRIYA.Platform.Models.ApplicationUser", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.UserRole", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DRIYA.Platform.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("DRIYA.Platform.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DRIYA.Platform.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DRIYA.Platform.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DRIYA.Platform.Models.ApiKey", b =>
                {
                    b.Navigation("UsageHistory");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.Application", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("Features");

                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.ApplicationUser", b =>
                {
                    b.Navigation("LoginHistory");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.Feature", b =>
                {
                    b.Navigation("FeatureFlags");

                    b.Navigation("PlanFeatures");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");

                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.LicensePlan", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("PlanFeatures");

                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.PaymentGateway", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.Role", b =>
                {
                    b.Navigation("ChildRoles");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DRIYA.Platform.Models.Tenant", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("FeatureFlags");

                    b.Navigation("Invoices");

                    b.Navigation("PaymentTransactions");

                    b.Navigation("TenantDatabases");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
